/**
 * splunk-spl-to-sql - Convert SPL to SQL with pegjs
 * @version v1.6.4
 * @author wangfucheng <wangfucheng@machloop.com>
 * @buildAt 2020-11-24T08:47:41.480Z
 */
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module.exports) {
    module.exports = factory();
  } else {
    root.splToSqlConverter = factory();
  }
})(this, function () {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },
      "class": function _class(expectation) {
        var escapedParts = "",
            i;

        for (i = 0; i < expectation.parts.length; i++) {
          escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
        }

        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
      },
      any: function any(expectation) {
        return "any character";
      },
      end: function end(expectation) {
        return "end of input";
      },
      other: function other(expectation) {
        return expectation.description;
      }
    };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function classEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i,
          j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }

        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},
        peg$startRuleFunctions = {
      start: peg$parsestart
    },
        peg$startRuleFunction = peg$parsestart,
        peg$c0 = peg$otherExpectation("SplExpression"),
        peg$c1 = function peg$c1(sourceAndsearch, tailArr) {
      // select * from tableName where xxxx order by xxxx limit 0,10;
      var _sourceAndsearch = _slicedToArray(sourceAndsearch, 2),
          sourceName = _sourceAndsearch[0],
          search = _sourceAndsearch[1];

      var sql = '';
      var tailMap = {
        WHERE: search
      }; // 组装sql

      tailArr.forEach(function (item) {
        if (item && item[3]) {
          tailMap = Object.assign(tailMap, item[3]);
        }
      }); // // 展示的字段
      // if(tailMap.COLUMNS) {
      //   sql += 'SELECT ' + tailMap.COLUMNS;
      // } else {
      // sql += 'SELECT *';
      // }
      // // from
      // sql += ' FROM ' + '`' + sourceName + '`';
      // // where

      if (search) {
        sql += search;
      }

      if (tailMap.GENTIMES) {
        var _tailMap$GENTIMES = tailMap.GENTIMES,
            time_field = _tailMap$GENTIMES.time_field,
            time_from = _tailMap$GENTIMES.time_from,
            time_to = _tailMap$GENTIMES.time_to; // 转UTC时间

        var startTime = getUtcDate(time_from);
        var endTime = getUtcDate(time_to);
        var timeWhere = '(`' + time_field + '`' + ">= toDateTime64(:param_start_time, 9, 'UTC') AND " + '`' + time_field + '`' + " <= toDateTime64(:param_end_time, 9, 'UTC'))";

        if (!search) {
          tailMap.WHERE = sql = sql + timeWhere;
        } else {
          tailMap.WHERE = sql = sql + " AND ".concat(timeWhere);
        }

        paramsValuesObj['param_start_time'] = startTime;
        paramsValuesObj['param_end_time'] = endTime;
      } // order by


      if (tailMap.ORDER_BY) {
        sql += ' ' + tailMap.ORDER_BY;
      }

      if (tailMap.LIMIT) {
        sql += ' ' + tailMap.LIMIT;
      } // sql += ';'


      if (json) {
        return {
          result: {
            source: text(),
            target: sql,
            params: paramsValuesObj,
            dev: {
              expression: tailMap,
              fields: fields
            }
          }
        };
      }

      return {
        result: JSON.stringify({
          source: text(),
          target: sql,
          params: paramsValuesObj,
          dev: {
            expression: tailMap,
            fields: fields
          }
        })
      };
    },
        peg$c2 = peg$otherExpectation("SourceAndSearchExpression"),
        peg$c3 = function peg$c3(sourceArr, searchArr) {
      if (!searchArr || !searchArr[1] || searchArr.length === 0) {
        return ["", ""];
      }

      return ["", searchArr[1]];
    },
        peg$c4 = peg$otherExpectation("SearchExpression"),
        peg$c5 = function peg$c5(region) {
      return region ? '(' + region + ')' : '';
    },
        peg$c6 = peg$otherExpectation("RegionOr"),
        peg$c7 = function peg$c7(left, right) {
      return left + ' OR ' + right;
    },
        peg$c8 = peg$otherExpectation("RegionAnd"),
        peg$c9 = function peg$c9(left, right) {
      return left + ' AND ' + right;
    },
        peg$c10 = peg$otherExpectation("FactorBlock"),
        peg$c11 = function peg$c11(RegionOr) {
      return '(' + RegionOr + ')';
    },
        peg$c12 = peg$otherExpectation("BasicCondition"),
        peg$c13 = function peg$c13(fieldObj, op, value) {
      var fieldName = fieldObj.fieldName,
          fieldType = fieldObj.fieldType;
      var opText = ''; // @see: https://clickhouse.tech/docs/zh/sql-reference/operators/

      if (op === '=') {
        opText = '=';
      }

      if (op === '!=') {
        opText = '!=';
      }

      if (op === '>') {
        opText = '>';
      }

      if (op === '>=') {
        opText = '>=';
      }

      if (op === '<') {
        opText = '<';
      }

      if (op === '<=') {
        opText = '<=';
      }

      var _getLocation = getLocation(fieldName, fieldType),
          paramKey = _getLocation.paramKey,
          paramName = _getLocation.paramName;

      if (fieldType && fieldType.indexOf('Array') > -1 && opText !== '=') {
        throw Error('数组类型的字段只支持=搜索');
      }

      if (opText) {
        if (fieldName === APPLICATION_NAME_KEY) {
          // 把应用名字替换成应用ID
          // 这里肯定只有一个值
          var appIdsArray = replaceAppliationName2Id([value]);
          updateParamsValues(paramKey, appIdsArray);
          var appOp = 'IN';

          if (opText !== '=' && opText !== '!=') {
            throw Error("\u5E94\u7528\u540D\u79F0\u53EA\u652F\u6301\u7B49\u4E8E\uFF08=\uFF09\u548C\u4E0D\u7B49\u4E8E\uFF08!=\uFF09");
          }

          if (opText === '!=') {
            appOp = 'NOT IN';
          }

          return '`' + APPLICATION_ID_KEY + '`' + ' ' + appOp + ' (' + paramKey + ')';
        }

        ; // 检查IP

        if (fieldType === 'IPv4' || fieldType === 'Array<IPv4>') {
          if (!IPv4Regex.test(value)) {
            throw Error("".concat(value, "\u4E0D\u662F\u4E2A\u6B63\u786E\u7684IPv4"));
          }
        }

        if (fieldType === 'IPv6' || fieldType === 'Array<IPv6>') {
          if (!IPv6Regex.test(value)) {
            throw Error("".concat(value, "\u4E0D\u662F\u4E2A\u6B63\u786E\u7684IPv6"));
          }
        }

        updateParamsValues(paramKey, value);

        if (fieldType.indexOf('Array') > -1) {
          return ' ' + paramName;
        }

        return '`' + fieldName + '`' + opText + paramName;
      }

      return "";
    },
        peg$c14 = peg$otherExpectation("InCondition"),
        peg$c15 = function peg$c15(fieldObj, values) {
      var fieldName = fieldObj.fieldName,
          fieldType = fieldObj.fieldType;

      var _getLocation2 = getLocation(fieldName, fieldType),
          paramKey = _getLocation2.paramKey,
          paramName = _getLocation2.paramName;

      if (fieldName === APPLICATION_NAME_KEY) {
        var newValues = replaceAppliationName2Id(values);
        updateParamsValues(paramKey, newValues);
        return '`' + APPLICATION_ID_KEY + '`' + ' IN ' + '(' + paramKey + ')';
      } // ip类型的比较特殊


      if (fieldType === 'IPv4' || fieldType === 'IPv6') {
        // 输入 ip4<IPv4> IN ('10.0.0.1', '10.0.0.2')
        // 输出 `ip4` IN (toIPv4(:param_X_0),toIPv4(:param_X_1))
        var paramNameArr = [];
        values.forEach(function (item, index) {
          var paramItem = paramKey + '_' + index;
          updateParamsValues(paramItem, item);

          if (fieldType === 'IPv4') {
            if (!IPv4Regex.test(item)) {
              throw Error("".concat(item, "\u4E0D\u662F\u4E2A\u6B63\u786E\u7684IPv4"));
            }

            paramNameArr.push("toIPv4(".concat(paramItem, ")"));
          } else {
            if (!IPv6Regex.test(item)) {
              throw Error("".concat(item, "\u4E0D\u662F\u4E2A\u6B63\u786E\u7684IPv6"));
            }

            paramNameArr.push("toIPv6(".concat(paramItem, ")"));
          }
        });
        return '`' + fieldName + '`' + ' IN ' + '(' + paramNameArr.join(',') + ')';
      } else if (fieldType === 'Array' || fieldType === 'Array<IPv4>' || fieldType === 'Array<IPv6>') {
        // 输入 ip4<Array<IPv4>> IN ('10.0.0.1', '10.0.0.2')
        // 输出 `ip4` hasAny(字段名, [toIPv4(:par1), toIPv4(:par2)])=1
        var _paramNameArr = [];
        values.forEach(function (item, index) {
          var paramItem = paramKey + '_' + index;
          updateParamsValues(paramItem, item);

          if (fieldType === 'Array<IPv4>') {
            if (!IPv4Regex.test(item)) {
              throw Error("".concat(item, "\u4E0D\u662F\u4E2A\u6B63\u786E\u7684IPv4"));
            }

            _paramNameArr.push("toIPv4(".concat(paramItem, ")"));
          } else if (fieldType === 'Array<IPv6>') {
            if (!IPv6Regex.test(item)) {
              throw Error("".concat(item, "\u4E0D\u662F\u4E2A\u6B63\u786E\u7684IPv6"));
            }

            _paramNameArr.push("toIPv6(".concat(paramItem, ")"));
          } else {
            _paramNameArr.push(paramItem);
          }
        }); // @see: https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#hasany

        return ' hasAny(`' + fieldName + '`, [' + _paramNameArr.join(',') + '])=1';
      } else {
        updateParamsValues(paramKey, values);
        return '`' + fieldName + '`' + ' IN ' + '(' + paramName + ')';
      }
    },
        peg$c16 = peg$otherExpectation("NotInCondition"),
        peg$c17 = function peg$c17(fieldObj, values) {
      var fieldName = fieldObj.fieldName,
          fieldType = fieldObj.fieldType;

      var _getLocation3 = getLocation(fieldName, fieldType),
          paramKey = _getLocation3.paramKey,
          paramName = _getLocation3.paramName;

      if (fieldName === APPLICATION_NAME_KEY) {
        var newValues = replaceAppliationName2Id(values);
        updateParamsValues(paramKey, newValues);
        return '`' + APPLICATION_ID_KEY + '`' + ' NOT IN ' + '(' + paramKey + ')';
      } // ip类型的比较特殊


      if (fieldType === 'IPv4' || fieldType === 'IPv6') {
        // 输入 ip4<IPv4> IN ('10.0.0.1', '10.0.0.2')
        // 输出 `ip4` IN (toIPv4(:param_X_0),toIPv4(:param_X_1))
        var paramNameArr = [];
        values.forEach(function (item, index) {
          var paramItem = paramKey + '_' + index;
          updateParamsValues(paramItem, item);

          if (fieldType === 'IPv4') {
            if (!IPv4Regex.test(item)) {
              throw Error("".concat(item, "\u4E0D\u662F\u4E2A\u6B63\u786E\u7684IPv4"));
            }

            paramNameArr.push("toIPv4(".concat(paramItem, ")"));
          } else {
            if (!IPv6Regex.test(item)) {
              throw Error("".concat(item, "\u4E0D\u662F\u4E2A\u6B63\u786E\u7684IPv6"));
            }

            paramNameArr.push("toIPv6(".concat(paramItem, ")"));
          }
        });
        return '`' + fieldName + '`' + ' NOT IN ' + '(' + paramNameArr.join(',') + ')';
      } else if (fieldType === 'Array' || fieldType === 'Array<IPv4>' || fieldType === 'Array<IPv6>') {
        // 输入 ip4<Array<IPv4>> IN ('10.0.0.1', '10.0.0.2')
        // 输出 `ip4` hasAny(字段名, [toIPv4(:par1), toIPv4(:par2)])=1
        var _paramNameArr2 = [];
        values.forEach(function (item, index) {
          var paramItem = paramKey + '_' + index;
          updateParamsValues(paramItem, item);

          if (fieldType === 'Array<IPv4>') {
            if (!IPv4Regex.test(item)) {
              throw Error("".concat(item, "\u4E0D\u662F\u4E2A\u6B63\u786E\u7684IPv4"));
            }

            _paramNameArr2.push("toIPv4(".concat(paramItem, ")"));
          } else if (fieldType === 'Array<IPv6>') {
            if (!IPv6Regex.test(item)) {
              throw Error("".concat(item, "\u4E0D\u662F\u4E2A\u6B63\u786E\u7684IPv6"));
            }

            _paramNameArr2.push("toIPv6(".concat(paramItem, ")"));
          } else {
            _paramNameArr2.push(paramItem);
          }
        }); // @see: https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#hasany

        return ' hasAny(`' + fieldName + '`, [' + _paramNameArr2.join(',') + '])=0';
      } else {
        updateParamsValues(paramKey, values);
        return '`' + fieldName + '`' + ' NOT IN ' + '(' + paramName + ')';
      }
    },
        peg$c18 = peg$otherExpectation("MultipleValue"),
        peg$c19 = function peg$c19(first, rest) {
      var result = [first].concat(rest);
      return uniqueArray(result);
    },
        peg$c20 = peg$otherExpectation("MoreMultipleValues"),
        peg$c21 = ",",
        peg$c22 = peg$literalExpectation(",", false),
        peg$c23 = function peg$c23(value) {
      return value;
    },
        peg$c24 = peg$otherExpectation("LikeCondition"),
        peg$c25 = function peg$c25(fieldObj, value) {
      var fieldName = fieldObj.fieldName,
          fieldType = fieldObj.fieldType;

      if (fieldType && fieldType.indexOf('IP') > -1) {
        throw Error('IP类型的字段不支持LIKE');
      }

      var _getLocation4 = getLocation(fieldName, fieldType),
          paramKey = _getLocation4.paramKey,
          paramName = _getLocation4.paramName;

      if (fieldName === APPLICATION_NAME_KEY) {
        var newValues = replaceAppliationName2IdWithLike(value);
        updateParamsValues(paramKey, newValues);
        return '`' + APPLICATION_ID_KEY + '`' + ' IN ' + '(' + paramKey + ')';
      }

      updateParamsValues(paramKey, value); // @see: https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#array-filter

      if (fieldType === 'Array') {
        return 'arrayFilter(x -> x LIKE ' + paramKey + ',`' + fieldName + '`)';
      }

      return '`' + fieldName + '`' + ' LIKE ' + paramName;
    },
        peg$c26 = peg$otherExpectation("NotLikeCondition"),
        peg$c27 = function peg$c27(fieldObj, value) {
      var fieldName = fieldObj.fieldName,
          fieldType = fieldObj.fieldType;

      if (fieldType.indexOf('IP') > -1) {
        throw Error('IP类型的字段不支持 NOT LIKE');
      }

      var _getLocation5 = getLocation(fieldName, fieldType),
          paramKey = _getLocation5.paramKey,
          paramName = _getLocation5.paramName;

      if (fieldName === APPLICATION_NAME_KEY) {
        var newValues = replaceAppliationName2IdWithLike(value);
        updateParamsValues(paramKey, newValues);
        return '`' + APPLICATION_ID_KEY + '`' + ' NOT IN ' + '(' + paramKey + ')';
      }

      updateParamsValues(paramKey, value); // @see: https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#array-filter

      if (fieldType === 'Array') {
        return 'arrayFilter(x -> x NOT LIKE ' + paramKey + ',`' + fieldName + '`)';
      }

      return '`' + fieldName + '`' + ' NOT LIKE ' + paramName;
    },
        peg$c28 = /^[\u4E00-\u9FA5_a-zA-Z0-9a-zA-Z0-9._\-%_[,\]\^]/,
        peg$c29 = peg$classExpectation([["\u4E00", "\u9FA5"], "_", ["a", "z"], ["A", "Z"], ["0", "9"], ["a", "z"], ["A", "Z"], ["0", "9"], ".", "_", "-", "%", "_", "[", ",", "]", "^"], false, false),
        peg$c30 = "\"",
        peg$c31 = peg$literalExpectation("\"", false),
        peg$c32 = function peg$c32(_char) {
      return _char;
    },
        peg$c33 = "'",
        peg$c34 = peg$literalExpectation("'", false),
        peg$c35 = "`",
        peg$c36 = peg$literalExpectation("`", false),
        peg$c37 = peg$otherExpectation("TailCommand"),
        peg$c38 = peg$otherExpectation("FieldsCommand"),
        peg$c39 = function peg$c39(first, rest) {
      var fieldsArr = [first].concat(rest); // +的放在includes，-放在excludes

      var includes = [];
      var excludes = [];
      fieldsArr.forEach(function (_ref) {
        var op = _ref.op,
            field = _ref.field;

        if (op === '+') {
          includes.push(field);
        }

        if (op === '-') {
          excludes.push(field);
        }
      });
      return {
        COLUMNS: includes.map(function (v) {
          return '`' + v + '`';
        }).join(',')
      };
    },
        peg$c40 = peg$otherExpectation("Column"),
        peg$c41 = function peg$c41(op, field) {
      return {
        op: op || '+',
        field: field
      };
    },
        peg$c42 = peg$otherExpectation("MoreColumns"),
        peg$c43 = function peg$c43(field) {
      return field;
    },
        peg$c44 = peg$otherExpectation("HeadCommand"),
        peg$c45 = function peg$c45(number) {
      if (number <= 0) {
        throw Error('返回结果的数量至少为1');
      }

      return {
        LIMIT: 'LIMIT 0,' + number
      };
    },
        peg$c46 = peg$otherExpectation("SortCommand"),
        peg$c47 = function peg$c47(op, first, rest) {
      // +ip/ip ==> {ip: {order: 'asc'}}
      // -ip ==> {ip: {order: 'desc'}}
      // [[操作符, 字段], [操作符, 字段]]
      var sortsArr = [[op, first]].concat(rest);
      var sortText = sortsArr.map(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
            op = _ref3[0],
            field = _ref3[1];

        return field + ' ' + (!op || op === PLUS ? 'ASC' : 'DESC');
      });
      return {
        ORDER_BY: 'ORDER BY' + ' ' + sortText
      };
    },
        peg$c48 = peg$otherExpectation("MoreSort"),
        peg$c49 = function peg$c49(op, field) {
      return [op, field];
    },
        peg$c50 = peg$otherExpectation("GentimesCommand"),
        peg$c51 = "start",
        peg$c52 = peg$literalExpectation("start", true),
        peg$c53 = "end",
        peg$c54 = peg$literalExpectation("end", true),
        peg$c55 = function peg$c55(field, startTime, endTimeArr) {
      var endTime = currentTime;

      if (endTimeArr.length > 0) {
        endTime = endTimeArr[0][5];
      }

      return {
        GENTIMES: {
          time_field: field,
          time_from: startTime,
          time_to: endTime
        }
      };
    },
        peg$c56 = peg$otherExpectation("TimeValue"),
        peg$c57 = peg$otherExpectation("RelativeTime"),
        peg$c58 = "now-",
        peg$c59 = peg$literalExpectation("now-", false),
        peg$c60 = function peg$c60(number, timeUnit) {
      var endTime = new Date(currentTime);
      var diffSenonds = 0;

      if (timeUnit === "y") {
        endTime = endTime.setFullYear(endTime.getFullYear() - number);
      }

      if (timeUnit === "M") {
        endTime = endTime.setMonth(endTime.getMonth() - number);
      }

      if (timeUnit === "w") {
        endTime = endTime.setDate(endTime.getDate() - number * 7);
      }

      if (timeUnit === "d") {
        endTime = endTime.setDate(endTime.getDate() - number);
      }

      if (timeUnit === "h" || timeUnit === "H") {
        endTime = endTime.setHours(endTime.getHours() - number);
      }

      if (timeUnit === "m") {
        endTime = endTime.setMinutes(endTime.getMinutes() - number);
      }

      if (timeUnit === "s") {
        endTime = endTime.setSeconds(endTime.getSeconds() - number);
      }

      return new Date(endTime).getTime();
    },
        peg$c61 = peg$otherExpectation("now"),
        peg$c62 = "now",
        peg$c63 = peg$literalExpectation("now", false),
        peg$c64 = function peg$c64() {
      return currentTime;
    },
        peg$c65 = peg$otherExpectation("TimeUnit"),
        peg$c66 = "y",
        peg$c67 = peg$literalExpectation("y", false),
        peg$c68 = "M",
        peg$c69 = peg$literalExpectation("M", false),
        peg$c70 = "w",
        peg$c71 = peg$literalExpectation("w", false),
        peg$c72 = "d",
        peg$c73 = peg$literalExpectation("d", false),
        peg$c74 = "h",
        peg$c75 = peg$literalExpectation("h", false),
        peg$c76 = "H",
        peg$c77 = peg$literalExpectation("H", false),
        peg$c78 = "m",
        peg$c79 = peg$literalExpectation("m", false),
        peg$c80 = "s",
        peg$c81 = peg$literalExpectation("s", false),
        peg$c82 = function peg$c82() {
      return text();
    },
        peg$c83 = peg$otherExpectation("Timestamp"),
        peg$c84 = function peg$c84(timestamp) {
      if (String(timestamp).length !== 13) {
        throw Error('请输入毫秒级的时间戳');
      }

      return timestamp;
    },
        peg$c85 = peg$otherExpectation("UTCTime"),
        peg$c86 = "-",
        peg$c87 = peg$literalExpectation("-", false),
        peg$c88 = "T",
        peg$c89 = peg$literalExpectation("T", false),
        peg$c90 = ":",
        peg$c91 = peg$literalExpectation(":", false),
        peg$c92 = function peg$c92(year, month, day, hours, minutes, seconds, timeZone) {
      if (String(year).length !== 4 || String(month).length !== 2 || String(day).length !== 2 || String(hours).length !== 2 || String(minutes).length !== 2 || String(seconds).length !== 2) {
        throw Error("时间格式错误。时间格式：YYYY-MM-DDTHH:mm:ssZ");
      }

      var time = '';

      if (timeZone) {
        var _timeZone = _slicedToArray(timeZone, 3),
            op = _timeZone[0],
            timeZoneString = _timeZone[1],
            suffix = _timeZone[2]; // 判断时区范围


        var timeZoneNumber = parseInt(timeZoneString);

        if (timeZoneNumber > 12 || timeZoneNumber < -12) {
          throw Error('错误的时区范围');
        }

        if (suffix && suffix.length < 2 || suffix && suffix.length === 2 && (suffix[0] !== '0' || suffix[1] !== '0') || timeZoneNumber < 10 && (timeZoneString.charAt(0) !== '0' || timeZoneString.charAt(0) === '0' && timeZoneString.length !== 2)) {
          throw Error("\u65F6\u533A\u683C\u5F0F\u9519\u8BEF. \u672A\u80FD\u89E3\u6790\u65E5\u671F\u5B57\u6BB5 [".concat(text(), "], \u8BF7\u8F93\u5165 [").concat(op, "0").concat(timeZoneNumber, "] \u6216 [").concat(op, "0").concat(timeZoneNumber, ":00]"));
        }

        if (suffix.length === 0) {
          time = "".concat(text(), ":00");
        } else {
          time = text();
        }
      } else {
        time = "".concat(text(), "+08:00");
      }

      return new Date(time).getTime();
    },
        peg$c93 = peg$otherExpectation("YYYYMMDDHHmmss"),
        peg$c94 = function peg$c94(year, month, day, hours, minutes, seconds) {
      if (String(year).length !== 4 || String(month).length !== 2 || String(day).length !== 2 || String(hours).length !== 2 || String(minutes).length !== 2 || String(seconds).length !== 2) {
        throw Error("时间格式错误。时间格式：YYYY-MM-DD HH:mm:ss");
      }

      return new Date(text().replace(/ /, 'T') + getTimeZone()).getTime();
    },
        peg$c95 = peg$otherExpectation("TimeInteger"),
        peg$c96 = /^[0-9]/,
        peg$c97 = peg$classExpectation([["0", "9"]], false, false),
        peg$c98 = function peg$c98(num) {
      return num.join('');
    },
        peg$c99 = peg$otherExpectation("TimeZone"),
        peg$c100 = "+",
        peg$c101 = peg$literalExpectation("+", false),
        peg$c102 = "00",
        peg$c103 = peg$literalExpectation("00", false),
        peg$c104 = ":00",
        peg$c105 = peg$literalExpectation(":00", false),
        peg$c106 = function peg$c106(op, numberArr, suffix) {
      var numberstring = numberArr.join('');
      suffix = suffix || numberstring.slice(2, 4);
      return [op, numberstring.slice(0, 2), suffix];
    },
        peg$c107 = /^[ \t\r\n]/,
        peg$c108 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false),
        peg$c109 = /^[ ]/,
        peg$c110 = peg$classExpectation([" "], false, false),
        peg$c111 = peg$otherExpectation("DataSource"),
        peg$c112 = /^[a-zA-Z0-9._\-*]/,
        peg$c113 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], ".", "_", "-", "*"], false, false),
        peg$c114 = peg$otherExpectation("Field"),
        peg$c115 = /^[A-Za-z0-9_.]/,
        peg$c116 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "_", "."], false, false),
        peg$c117 = function peg$c117(str) {
      var field = str.join(''); // TODO: 排除命令
      // 这里为什么会识别到命令前缀呢？

      if (fields.indexOf(field) === -1 && ["fields", "FIELDS", "sort", "SORT", "gentimes", "GENTIMES", "head", "HEAD"].indexOf(field) === -1) {
        fields.push(field);
      }

      return field;
    },
        peg$c118 = peg$otherExpectation("FieldWithType"),
        peg$c119 = function peg$c119(str, type) {
      var field = str.join('');
      var fullField = field + (type ? '<' + type + '>' : ''); // TODO: 排除命令
      // 这里为什么会识别到命令前缀呢？

      if (fields.indexOf(fullField) === -1 && ["fields", "FIELDS", "sort", "SORT", "gentimes", "GENTIMES", "head", "HEAD"].indexOf(field) === -1) {
        fields.push(fullField);
      }

      return {
        fieldName: field,
        fieldType: type || ''
      };
    },
        peg$c120 = peg$otherExpectation("FieldType"),
        peg$c121 = "<",
        peg$c122 = peg$literalExpectation("<", false),
        peg$c123 = /^[A-Za-z0-9]/,
        peg$c124 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"]], false, false),
        peg$c125 = ">",
        peg$c126 = peg$literalExpectation(">", false),
        peg$c127 = function peg$c127(frist, second) {
      var topTypeArr = ['IPv4', 'IPv6', 'Array']; // 'Number' , 'String' , 

      var str = frist.join('');

      if (topTypeArr.indexOf(str) === -1) {
        throw Error("\u5B57\u6BB5\u7C7B\u578B\u53EA\u80FD\u662F".concat(FIELD_TYPES.join('、')));
      }

      return str + (second ? "<".concat(second, ">") : '');
    },
        peg$c128 = peg$otherExpectation("FieldSecondType"),
        peg$c129 = function peg$c129(arr) {
      var str = arr.join('');

      if (['IPv4', 'IPv6'].indexOf(str) === -1) {
        throw Error("\u5B57\u6BB5\u7C7B\u578B\u53EA\u80FD\u662F".concat(FIELD_TYPES.join('、')));
      }

      return str;
    },
        peg$c130 = peg$otherExpectation("Value"),
        peg$c131 = /^[\u4E00-\u9FA5_a-zA-Z0-9.\-?*:\/]/,
        peg$c132 = peg$classExpectation([["\u4E00", "\u9FA5"], "_", ["a", "z"], ["A", "Z"], ["0", "9"], ".", "-", "?", "*", ":", "/"], false, false),
        peg$c133 = /^[^"]/,
        peg$c134 = peg$classExpectation(["\""], true, false),
        peg$c135 = function peg$c135(_char2) {
      return _char2.join('');
    },
        peg$c136 = /^[^']/,
        peg$c137 = peg$classExpectation(["'"], true, false),
        peg$c138 = function peg$c138() {
      return '';
    },
        peg$c139 = function peg$c139() {
      return "";
    },
        peg$c140 = peg$otherExpectation("QuotedValue"),
        peg$c141 = /^[\u4E00-\u9FA5_a-zA-Z0-9.\-?*:\/<> =,]/,
        peg$c142 = peg$classExpectation([["\u4E00", "\u9FA5"], "_", ["a", "z"], ["A", "Z"], ["0", "9"], ".", "-", "?", "*", ":", "/", "<", ">", " ", "=", ","], false, false),
        peg$c143 = function peg$c143(num) {
      return parseInt(num.join(''));
    },
        peg$c144 = "and",
        peg$c145 = peg$literalExpectation("AND", true),
        peg$c146 = "&&",
        peg$c147 = peg$literalExpectation("&&", false),
        peg$c148 = function peg$c148() {
      return AND;
    },
        peg$c149 = "or",
        peg$c150 = peg$literalExpectation("OR", true),
        peg$c151 = "||",
        peg$c152 = peg$literalExpectation("||", false),
        peg$c153 = function peg$c153() {
      return OR;
    },
        peg$c154 = "true",
        peg$c155 = peg$literalExpectation("true", false),
        peg$c156 = function peg$c156() {
      return true;
    },
        peg$c157 = "false",
        peg$c158 = peg$literalExpectation("false", false),
        peg$c159 = function peg$c159() {
      return false;
    },
        peg$c160 = "|",
        peg$c161 = peg$literalExpectation("|", false),
        peg$c162 = "=",
        peg$c163 = peg$literalExpectation("=", false),
        peg$c164 = "!=",
        peg$c165 = peg$literalExpectation("!=", false),
        peg$c166 = ">=",
        peg$c167 = peg$literalExpectation(">=", false),
        peg$c168 = "<=",
        peg$c169 = peg$literalExpectation("<=", false),
        peg$c170 = "(",
        peg$c171 = peg$literalExpectation("(", false),
        peg$c172 = ")",
        peg$c173 = peg$literalExpectation(")", false),
        peg$c174 = "source",
        peg$c175 = peg$literalExpectation("SOURCE", true),
        peg$c176 = "search",
        peg$c177 = peg$literalExpectation("SEARCH", true),
        peg$c178 = "fields",
        peg$c179 = peg$literalExpectation("FIELDS", true),
        peg$c180 = "head",
        peg$c181 = peg$literalExpectation("HEAD", true),
        peg$c182 = "sort",
        peg$c183 = peg$literalExpectation("SORT", true),
        peg$c184 = "gentimes",
        peg$c185 = peg$literalExpectation("GENTIMES", true),
        peg$c186 = "size",
        peg$c187 = peg$literalExpectation("SIZE", true),
        peg$c188 = "timeout",
        peg$c189 = peg$literalExpectation("TIMEOUT", true),
        peg$c190 = "track_total_hits",
        peg$c191 = peg$literalExpectation("TRACK_TOTAL_HITS", true),
        peg$c192 = "terminate_after",
        peg$c193 = peg$literalExpectation("TERMINATE_AFTER", true),
        peg$c194 = "top",
        peg$c195 = peg$literalExpectation("TOP", true),
        peg$c196 = "limit",
        peg$c197 = peg$literalExpectation("LIMIT", true),
        peg$c198 = "in",
        peg$c199 = peg$literalExpectation("IN", true),
        peg$c200 = "not in",
        peg$c201 = peg$literalExpectation("NOT IN", true),
        peg$c202 = "like",
        peg$c203 = peg$literalExpectation("LIKE", true),
        peg$c204 = "not like",
        peg$c205 = peg$literalExpectation("NOT LIKE", true),
        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{
      line: 1,
      column: 1
    }],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
      throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return {
        type: "literal",
        text: text,
        ignoreCase: ignoreCase
      };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return {
        type: "class",
        parts: parts,
        inverted: inverted,
        ignoreCase: ignoreCase
      };
    }

    function peg$anyExpectation() {
      return {
        type: "any"
      };
    }

    function peg$endExpectation() {
      return {
        type: "end"
      };
    }

    function peg$otherExpectation(description) {
      return {
        type: "other",
        description: description
      };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p;

      if (details) {
        return details;
      } else {
        p = pos - 1;

        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails = peg$computePosDetails(endPos);
      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }

    function peg$parsestart() {
      var s0;
      s0 = peg$parseSplExpression();
      return s0;
    }

    function peg$parseSplExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseSourceAndSearchExpression();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();

        if (s4 === peg$FAILED) {
          s4 = null;
        }

        if (s4 !== peg$FAILED) {
          s5 = peg$parsedivider();

          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();

            if (s6 === peg$FAILED) {
              s6 = null;
            }

            if (s6 !== peg$FAILED) {
              s7 = peg$parseTailCommand();

              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();

          if (s4 === peg$FAILED) {
            s4 = null;
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parsedivider();

            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();

              if (s6 === peg$FAILED) {
                s6 = null;
              }

              if (s6 !== peg$FAILED) {
                s7 = peg$parseTailCommand();

                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();

          if (s3 === peg$FAILED) {
            s3 = null;
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c0);
        }
      }

      return s0;
    }

    function peg$parseSourceAndSearchExpression() {
      var s0, s1, s2, s3, s4, s5, s6;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseSOURCE();

      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();

        if (s3 !== peg$FAILED) {
          s4 = peg$parseequal();

          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();

            if (s5 !== peg$FAILED) {
              s6 = peg$parseDataSource();

              if (s6 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5, s6];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 === peg$FAILED) {
        s1 = null;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();

        if (s3 !== peg$FAILED) {
          s4 = peg$parseSearchExpression();

          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c2);
        }
      }

      return s0;
    }

    function peg$parseSearchExpression() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsedivider();

      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();

        if (s3 !== peg$FAILED) {
          s4 = peg$parseSEARCH();

          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();

            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 === peg$FAILED) {
        s1 = null;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseRegionOr();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c5(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c4);
        }
      }

      return s0;
    }

    function peg$parseRegionOr() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseRegionAnd();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWhitespace();

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseWhitespace();
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parseOrExpression();

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWhitespace();

            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseWhitespace();
              }
            } else {
              s4 = peg$FAILED;
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parseRegionOr();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c7(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parseRegionAnd();
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c6);
        }
      }

      return s0;
    }

    function peg$parseRegionAnd() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseFactorBlock();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWhitespace();

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseWhitespace();
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parseAndExpression();

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWhitespace();

            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseWhitespace();
              }
            } else {
              s4 = peg$FAILED;
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parseRegionAnd();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c9(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parseFactorBlock();
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c8);
        }
      }

      return s0;
    }

    function peg$parseFactorBlock() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$parseBasicCondition();

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseparenStart();

        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseWhitespace();

          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseWhitespace();
          }

          if (s2 !== peg$FAILED) {
            s3 = peg$parseRegionOr();

            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseWhitespace();

              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseWhitespace();
              }

              if (s4 !== peg$FAILED) {
                s5 = peg$parseparenEnd();

                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c11(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c10);
        }
      }

      return s0;
    }

    function peg$parseBasicCondition() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseFieldWithType();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseequal();

          if (s3 === peg$FAILED) {
            s3 = peg$parsenotEqual();

            if (s3 === peg$FAILED) {
              s3 = peg$parsegte();

              if (s3 === peg$FAILED) {
                s3 = peg$parsegt();

                if (s3 === peg$FAILED) {
                  s3 = peg$parselte();

                  if (s3 === peg$FAILED) {
                    s3 = peg$parselt();
                  }
                }
              }
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();

            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c13(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parseInCondition();

        if (s0 === peg$FAILED) {
          s0 = peg$parseNotInCondition();

          if (s0 === peg$FAILED) {
            s0 = peg$parseLikeCondition();

            if (s0 === peg$FAILED) {
              s0 = peg$parseNotLikeCondition();
            }
          }
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c12);
        }
      }

      return s0;
    }

    function peg$parseInCondition() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseFieldWithType();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseIN();

          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();

            if (s4 !== peg$FAILED) {
              s5 = peg$parseparenStart();

              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();

                if (s6 !== peg$FAILED) {
                  s7 = peg$parseMultipleValue();

                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();

                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseparenEnd();

                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c15(s1, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c14);
        }
      }

      return s0;
    }

    function peg$parseNotInCondition() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseFieldWithType();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseNOT_IN();

          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();

            if (s4 !== peg$FAILED) {
              s5 = peg$parseparenStart();

              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();

                if (s6 !== peg$FAILED) {
                  s7 = peg$parseMultipleValue();

                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();

                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseparenEnd();

                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c17(s1, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c16);
        }
      }

      return s0;
    }

    function peg$parseMultipleValue() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseValue();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseMoreMultipleValues();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseMoreMultipleValues();
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c18);
        }
      }

      return s0;
    }

    function peg$parseMoreMultipleValues() {
      var s0, s1, s2, s3, s4;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c21;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c22);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseValue();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c23(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c20);
        }
      }

      return s0;
    }

    function peg$parseLikeCondition() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseFieldWithType();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseLIKE();

          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();

            if (s4 !== peg$FAILED) {
              s5 = peg$parseLikeValue();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c25(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c24);
        }
      }

      return s0;
    }

    function peg$parseNotLikeCondition() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseFieldWithType();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseNOT_LIKE();

          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();

            if (s4 !== peg$FAILED) {
              s5 = peg$parseLikeValue();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c27(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c26);
        }
      }

      return s0;
    }

    function peg$parseLikeValue() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c28.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c29);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c28.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c29);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c30;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c31);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = peg$parseLikeValue();

          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c30;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c31);
              }
            }

            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c32(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$currPos;

          if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c33;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c34);
            }
          }

          if (s1 !== peg$FAILED) {
            s2 = peg$parseLikeValue();

            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c33;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c34);
                }
              }

              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c32(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          if (s0 === peg$FAILED) {
            s0 = peg$currPos;

            if (input.charCodeAt(peg$currPos) === 96) {
              s1 = peg$c35;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c36);
              }
            }

            if (s1 !== peg$FAILED) {
              s2 = peg$parseLikeValue();

              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 96) {
                  s3 = peg$c35;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c36);
                  }
                }

                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c32(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseTailCommand() {
      var s0, s1;
      peg$silentFails++;
      s0 = peg$parseGentimesCommand();
      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c37);
        }
      }

      return s0;
    }

    function peg$parseFieldsCommand() {
      var s0, s1, s2, s3, s4, s5, s6;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseFIELDS();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseColumn();

            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseMoreColumns();

              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseMoreColumns();
              }

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c39(s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c38);
        }
      }

      return s0;
    }

    function peg$parseColumn() {
      var s0, s1, s2, s3, s4;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse_();

      if (s1 === peg$FAILED) {
        s1 = null;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseplus();

        if (s2 === peg$FAILED) {
          s2 = peg$parseminus();
        }

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 === peg$FAILED) {
            s3 = null;
          }

          if (s3 !== peg$FAILED) {
            s4 = peg$parseField();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c41(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c40);
        }
      }

      return s0;
    }

    function peg$parseMoreColumns() {
      var s0, s1, s2, s3, s4;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c21;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c22);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseColumn();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c43(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c42);
        }
      }

      return s0;
    }

    function peg$parseHeadCommand() {
      var s0, s1, s2, s3, s4;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEAD();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseInteger();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c45(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c44);
        }
      }

      return s0;
    }

    function peg$parseSortCommand() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseSORT();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseplus();

            if (s4 === peg$FAILED) {
              s4 = peg$parseminus();
            }

            if (s4 === peg$FAILED) {
              s4 = null;
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parseField();

              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseMoreSort();

                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseMoreSort();
                }

                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c47(s4, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c46);
        }
      }

      return s0;
    }

    function peg$parseMoreSort() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c21;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c22);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseplus();

            if (s4 === peg$FAILED) {
              s4 = peg$parseminus();
            }

            if (s4 === peg$FAILED) {
              s4 = null;
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parseField();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c49(s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c48);
        }
      }

      return s0;
    }

    function peg$parseGentimesCommand() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseGENTIMES();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseField();

            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();

              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c51) {
                  s6 = input.substr(peg$currPos, 5);
                  peg$currPos += 5;
                } else {
                  s6 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c52);
                  }
                }

                if (s6 !== peg$FAILED) {
                  s7 = peg$parse__();

                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseequal();

                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse__();

                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseTimeValue();

                        if (s10 !== peg$FAILED) {
                          s11 = [];
                          s12 = peg$currPos;
                          s13 = peg$parse_();

                          if (s13 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c53) {
                              s14 = input.substr(peg$currPos, 3);
                              peg$currPos += 3;
                            } else {
                              s14 = peg$FAILED;

                              if (peg$silentFails === 0) {
                                peg$fail(peg$c54);
                              }
                            }

                            if (s14 !== peg$FAILED) {
                              s15 = peg$parse__();

                              if (s15 !== peg$FAILED) {
                                s16 = peg$parseequal();

                                if (s16 !== peg$FAILED) {
                                  s17 = peg$parse__();

                                  if (s17 !== peg$FAILED) {
                                    s18 = peg$parseTimeValue();

                                    if (s18 !== peg$FAILED) {
                                      s19 = peg$parse__();

                                      if (s19 !== peg$FAILED) {
                                        s13 = [s13, s14, s15, s16, s17, s18, s19];
                                        s12 = s13;
                                      } else {
                                        peg$currPos = s12;
                                        s12 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s12;
                                      s12 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }

                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$currPos;
                            s13 = peg$parse_();

                            if (s13 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c53) {
                                s14 = input.substr(peg$currPos, 3);
                                peg$currPos += 3;
                              } else {
                                s14 = peg$FAILED;

                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c54);
                                }
                              }

                              if (s14 !== peg$FAILED) {
                                s15 = peg$parse__();

                                if (s15 !== peg$FAILED) {
                                  s16 = peg$parseequal();

                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parse__();

                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parseTimeValue();

                                      if (s18 !== peg$FAILED) {
                                        s19 = peg$parse__();

                                        if (s19 !== peg$FAILED) {
                                          s13 = [s13, s14, s15, s16, s17, s18, s19];
                                          s12 = s13;
                                        } else {
                                          peg$currPos = s12;
                                          s12 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s12;
                                        s12 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s12;
                                      s12 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          }

                          if (s11 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c55(s4, s10, s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c50);
        }
      }

      return s0;
    }

    function peg$parseTimeValue() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$parseTimestamp();

      if (s0 === peg$FAILED) {
        s0 = peg$parseRelativeTime();

        if (s0 === peg$FAILED) {
          s0 = peg$parseTimeNow();

          if (s0 === peg$FAILED) {
            s0 = peg$currPos;

            if (input.charCodeAt(peg$currPos) === 34) {
              s1 = peg$c30;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c31);
              }
            }

            if (s1 !== peg$FAILED) {
              s2 = peg$parseUTCTime();

              if (s2 === peg$FAILED) {
                s2 = peg$parseYYYYMMDDHHmmss();

                if (s2 === peg$FAILED) {
                  s2 = peg$parseRelativeTime();

                  if (s2 === peg$FAILED) {
                    s2 = peg$parseTimeNow();

                    if (s2 === peg$FAILED) {
                      s2 = peg$parseTimestamp();
                    }
                  }
                }
              }

              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s3 = peg$c30;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c31);
                  }
                }

                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c32(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }

            if (s0 === peg$FAILED) {
              s0 = peg$currPos;

              if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c33;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c34);
                }
              }

              if (s1 !== peg$FAILED) {
                s2 = peg$parseUTCTime();

                if (s2 === peg$FAILED) {
                  s2 = peg$parseYYYYMMDDHHmmss();

                  if (s2 === peg$FAILED) {
                    s2 = peg$parseRelativeTime();

                    if (s2 === peg$FAILED) {
                      s2 = peg$parseTimeNow();

                      if (s2 === peg$FAILED) {
                        s2 = peg$parseTimestamp();
                      }
                    }
                  }
                }

                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 39) {
                    s3 = peg$c33;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c34);
                    }
                  }

                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c32(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c56);
        }
      }

      return s0;
    }

    function peg$parseRelativeTime() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c58) {
        s1 = peg$c58;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c59);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseInteger();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseTimeUnit();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c60(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c57);
        }
      }

      return s0;
    }

    function peg$parseTimeNow() {
      var s0, s1;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 3) === peg$c62) {
        s1 = peg$c62;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c63);
        }
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c64();
      }

      s0 = s1;
      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c61);
        }
      }

      return s0;
    }

    function peg$parseTimeUnit() {
      var s0, s1;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 121) {
        s1 = peg$c66;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c67);
        }
      }

      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 77) {
          s1 = peg$c68;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c69);
          }
        }

        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 119) {
            s1 = peg$c70;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c71);
            }
          }

          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 100) {
              s1 = peg$c72;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c73);
              }
            }

            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 104) {
                s1 = peg$c74;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c75);
                }
              }

              if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 72) {
                  s1 = peg$c76;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c77);
                  }
                }

                if (s1 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 109) {
                    s1 = peg$c78;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c79);
                    }
                  }

                  if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 115) {
                      s1 = peg$c80;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c81);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c82();
      }

      s0 = s1;
      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c65);
        }
      }

      return s0;
    }

    function peg$parseTimestamp() {
      var s0, s1;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseInteger();

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c84(s1);
      }

      s0 = s1;
      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c83);
        }
      }

      return s0;
    }

    function peg$parseUTCTime() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseTimeInteger();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c86;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c87);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parseTimeInteger();

          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s4 = peg$c86;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c87);
              }
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parseTimeInteger();

              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 84) {
                  s6 = peg$c88;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c89);
                  }
                }

                if (s6 !== peg$FAILED) {
                  s7 = peg$parseTimeInteger();

                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s8 = peg$c90;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c91);
                      }
                    }

                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseTimeInteger();

                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s10 = peg$c90;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;

                          if (peg$silentFails === 0) {
                            peg$fail(peg$c91);
                          }
                        }

                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseTimeInteger();

                          if (s11 !== peg$FAILED) {
                            s12 = peg$parseTimeZone();

                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c92(s1, s3, s5, s7, s9, s11, s12);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c85);
        }
      }

      return s0;
    }

    function peg$parseYYYYMMDDHHmmss() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseTimeInteger();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c86;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c87);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parseTimeInteger();

          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s4 = peg$c86;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c87);
              }
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parseTimeInteger();

              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();

                if (s6 !== peg$FAILED) {
                  s7 = peg$parseTimeInteger();

                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s8 = peg$c90;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c91);
                      }
                    }

                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseTimeInteger();

                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s10 = peg$c90;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;

                          if (peg$silentFails === 0) {
                            peg$fail(peg$c91);
                          }
                        }

                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseTimeInteger();

                          if (s11 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c94(s1, s3, s5, s7, s9, s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c93);
        }
      }

      return s0;
    }

    function peg$parseTimeInteger() {
      var s0, s1, s2;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c96.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c97);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c96.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c97);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c98(s1);
      }

      s0 = s1;
      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c95);
        }
      }

      return s0;
    }

    function peg$parseTimeZone() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c101);
        }
      }

      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c86;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c87);
          }
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];

        if (peg$c96.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c97);
          }
        }

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);

            if (peg$c96.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c97);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c102) {
            s3 = peg$c102;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c103);
            }
          }

          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c104) {
              s3 = peg$c104;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c105);
              }
            }
          }

          if (s3 === peg$FAILED) {
            s3 = null;
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c106(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c99);
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;
      s0 = [];

      if (peg$c107.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c108);
        }
      }

      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);

          if (peg$c107.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c108);
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;
      s0 = [];

      if (peg$c107.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c108);
        }
      }

      while (s1 !== peg$FAILED) {
        s0.push(s1);

        if (peg$c107.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c108);
          }
        }
      }

      return s0;
    }

    function peg$parseWhitespace() {
      var s0;

      if (peg$c109.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c110);
        }
      }

      return s0;
    }

    function peg$parseDataSource() {
      var s0, s1, s2;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c112.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c113);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c112.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c113);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c111);
        }
      }

      return s0;
    }

    function peg$parseField() {
      var s0, s1, s2;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c115.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c116);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c115.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c116);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c117(s1);
      }

      s0 = s1;
      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c114);
        }
      }

      return s0;
    }

    function peg$parseFieldWithType() {
      var s0, s1, s2;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c115.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c116);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c115.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c116);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseFieldType();

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c119(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c118);
        }
      }

      return s0;
    }

    function peg$parseFieldType() {
      var s0, s1, s2, s3, s4;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c121;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c122);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];

        if (peg$c123.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c124);
          }
        }

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);

            if (peg$c123.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c124);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parseFieldSecondType();

          if (s3 === peg$FAILED) {
            s3 = null;
          }

          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s4 = peg$c125;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c126);
              }
            }

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c127(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c120);
        }
      }

      return s0;
    }

    function peg$parseFieldSecondType() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c121;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c122);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];

        if (peg$c123.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c124);
          }
        }

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);

            if (peg$c123.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c124);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c125;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c126);
            }
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c129(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c128);
        }
      }

      return s0;
    }

    function peg$parseValue() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c131.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c132);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c131.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c132);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c30;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c31);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = [];

          if (peg$c133.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c134);
            }
          }

          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);

              if (peg$c133.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c134);
                }
              }
            }
          } else {
            s2 = peg$FAILED;
          }

          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c30;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c31);
              }
            }

            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c135(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$currPos;

          if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c33;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c34);
            }
          }

          if (s1 !== peg$FAILED) {
            s2 = [];

            if (peg$c136.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c137);
              }
            }

            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);

                if (peg$c136.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c137);
                  }
                }
              }
            } else {
              s2 = peg$FAILED;
            }

            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c33;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c34);
                }
              }

              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c135(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          if (s0 === peg$FAILED) {
            s0 = peg$currPos;

            if (input.charCodeAt(peg$currPos) === 34) {
              s1 = peg$c30;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c31);
              }
            }

            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s2 = peg$c30;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c31);
                }
              }

              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c138();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }

            if (s0 === peg$FAILED) {
              s0 = peg$currPos;

              if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c33;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c34);
                }
              }

              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                  s2 = peg$c33;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c34);
                  }
                }

                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c139();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c130);
        }
      }

      return s0;
    }

    function peg$parseQuotedValue() {
      var s0, s1, s2;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c141.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c142);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c141.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c142);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c140);
        }
      }

      return s0;
    }

    function peg$parseInteger() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c96.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c97);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c96.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c97);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c143(s1);
      }

      s0 = s1;
      return s0;
    }

    function peg$parseAndExpression() {
      var s0, s1;

      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c144) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c145);
        }
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.substr(peg$currPos, 2) === peg$c146) {
          s1 = peg$c146;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c147);
          }
        }

        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c148();
        }

        s0 = s1;
      }

      return s0;
    }

    function peg$parseOrExpression() {
      var s0, s1;

      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c149) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c150);
        }
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.substr(peg$currPos, 2) === peg$c151) {
          s1 = peg$c151;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c152);
          }
        }

        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c153();
        }

        s0 = s1;
      }

      return s0;
    }

    function peg$parseBoolean() {
      var s0, s1;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c154) {
        s1 = peg$c154;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c155);
        }
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c156();
      }

      s0 = s1;

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.substr(peg$currPos, 5) === peg$c157) {
          s1 = peg$c157;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c158);
          }
        }

        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c159();
        }

        s0 = s1;
      }

      return s0;
    }

    function peg$parsedivider() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 124) {
        s0 = peg$c160;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c161);
        }
      }

      return s0;
    }

    function peg$parseequal() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c162;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c163);
        }
      }

      return s0;
    }

    function peg$parsenotEqual() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c164) {
        s0 = peg$c164;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c165);
        }
      }

      return s0;
    }

    function peg$parsegte() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c166) {
        s0 = peg$c166;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c167);
        }
      }

      return s0;
    }

    function peg$parsegt() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 62) {
        s0 = peg$c125;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c126);
        }
      }

      return s0;
    }

    function peg$parselte() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c168) {
        s0 = peg$c168;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c169);
        }
      }

      return s0;
    }

    function peg$parselt() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 60) {
        s0 = peg$c121;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c122);
        }
      }

      return s0;
    }

    function peg$parseplus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c100;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c101);
        }
      }

      return s0;
    }

    function peg$parseminus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c86;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c87);
        }
      }

      return s0;
    }

    function peg$parseparenStart() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 40) {
        s0 = peg$c170;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c171);
        }
      }

      return s0;
    }

    function peg$parseparenEnd() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 41) {
        s0 = peg$c172;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c173);
        }
      }

      return s0;
    }

    function peg$parseSOURCE() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c174) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c175);
        }
      }

      return s0;
    }

    function peg$parseSEARCH() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c176) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c177);
        }
      }

      return s0;
    }

    function peg$parseFIELDS() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c178) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c179);
        }
      }

      return s0;
    }

    function peg$parseHEAD() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c180) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c181);
        }
      }

      return s0;
    }

    function peg$parseSORT() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c182) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c183);
        }
      }

      return s0;
    }

    function peg$parseGENTIMES() {
      var s0;

      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c184) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c185);
        }
      }

      return s0;
    }

    function peg$parseSIZE() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c186) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c187);
        }
      }

      return s0;
    }

    function peg$parseTIMEOUT() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c188) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c189);
        }
      }

      return s0;
    }

    function peg$parseTRACK_TOTAL_HITS() {
      var s0;

      if (input.substr(peg$currPos, 16).toLowerCase() === peg$c190) {
        s0 = input.substr(peg$currPos, 16);
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c191);
        }
      }

      return s0;
    }

    function peg$parseTERMINATE_AFTER() {
      var s0;

      if (input.substr(peg$currPos, 15).toLowerCase() === peg$c192) {
        s0 = input.substr(peg$currPos, 15);
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c193);
        }
      }

      return s0;
    }

    function peg$parseTOP() {
      var s0;

      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c194) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c195);
        }
      }

      return s0;
    }

    function peg$parseLIMIT() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c196) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c197);
        }
      }

      return s0;
    }

    function peg$parseIN() {
      var s0;

      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c198) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c199);
        }
      }

      return s0;
    }

    function peg$parseNOT_IN() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c200) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c201);
        }
      }

      return s0;
    }

    function peg$parseLIKE() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c202) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c203);
        }
      }

      return s0;
    }

    function peg$parseNOT_LIKE() {
      var s0;

      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c204) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c205);
        }
      }

      return s0;
    }

    var AND = 'AND';
    var OR = 'OR';
    var PLUS = '+';
    var PARAMS_KEY = ':param_';
    var FIELD_TYPES = ['IPv4', 'IPv6', 'Array', 'Array<IPv4>', 'Array<IPv6>'];
    /**
    * IPv4正则校验
    * @see: https://github.com/sindresorhus/ip-regex/blob/master/index.js
    */

    var IPv4Regex = /^(25[0-5]|2[0-4]\d|[0-1]\d{2}|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d{2}|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d{2}|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d{2}|[1-9]?\d)$/;
    /**
    * IPv6正则校验
    * @see: https://github.com/richb-intermapper/IPv6-Regex/blob/master/ipv6validator.js#L15
    */

    var IPv6Regex = /^((?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d)|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d)|(:[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(:[a-fA-F\d]{1,4}){0,1}:(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d)|(:[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(:[a-fA-F\d]{1,4}){0,2}:(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d)|(:[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(:[a-fA-F\d]{1,4}){0,3}:(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d)|(:[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(:[a-fA-F\d]{1,4}){0,4}:(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d)|(:[a-fA-F\d]{1,4}){1,6}|:)|(?::((?::[a-fA-F\d]{1,4}){0,5}:(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d).(25[0-5]|2[0-4]d|[0-1]d{2}|[1-9]?d)|(?::[a-fA-F\d]{1,4}){1,7}|:)))(%[0-9a-zA-Z]{1,})?$/;
    var fields = [];
    var paramsValuesObj = {};
    var currentTime = new Date().getTime();
    /**
    * 判断对象是否为空
    */

    function objectIsEmpty(obj) {
      if (!obj) return true;
      if (Object.keys(obj).length === 0) return true;
      return false;
    }
    /**
    * 数组去重
    */


    function uniqueArray(array) {
      // return arr.reduce(
      //   (prev, cur) => (prev.includes(cur) ? prev : [...prev, cur]),
      //   []
      // );
      // java调用，无法使用ES6语法
      return array.filter(function (item, index, array) {
        return array.indexOf(item) === index;
      });
    }

    function getTimeZone() {
      var d = new Date();
      var timeZoneOffset = d.getTimezoneOffset();
      var op = timeZoneOffset > 0 ? '-' : '+';
      var timeZone = Math.abs(timeZoneOffset) / 60;
      return "".concat(op).concat(fixedZero(timeZone), ":00");
    }

    function fixedZero(val) {
      return val * 1 < 10 ? "0".concat(val) : val;
    }

    function getUtcDate(time) {
      var d = new Date(time || new Date());
      var YYYY = d.getUTCFullYear();
      var M = d.getUTCMonth() + 1;
      var D = d.getUTCDate();
      var H = d.getUTCHours();
      var m = d.getUTCMinutes();
      var s = d.getUTCSeconds();
      return YYYY + '-' + fixedZero(M) + '-' + fixedZero(D) + ' ' + fixedZero(H) + ':' + fixedZero(m) + ':' + fixedZero(s);
    }

    function getLocation(fieldName, fieldType) {
      var _location = location(),
          start = _location.start,
          end = _location.end;

      var paramKey = PARAMS_KEY + start.line + '_' + start.offset + '_' + end.line + '_' + end.offset;
      var paramName = paramKey; // 根据字段的类型，替换值
      // 'IPv4' , 'IPv6' , 'Array', 'Array<IPv4>' , 'Array<IPv6>' , 'Time'

      if (fieldType === 'IPv4') {
        paramName = "toIPv4(".concat(paramKey, ")");
      }

      if (fieldType === 'IPv6') {
        paramName = "toIPv6(".concat(paramKey, ")");
      }

      if (fieldType === 'Array') {
        paramName = "has(".concat(fieldName, ", ").concat(paramKey, ")=1");
      }

      if (fieldType === 'Array<IPv4>') {
        paramName = "has(".concat(fieldName, ", toIPv4(").concat(paramKey, "))=1");
      }

      if (fieldType === 'Array<IPv6>') {
        paramName = "has(".concat(fieldName, ", toIPv6(").concat(paramKey, "))=1");
      }

      return {
        paramKey: paramKey,
        paramName: paramName
      };
    }

    function updateParamsValues(key, value) {
      if (!paramsValuesObj.hasOwnProperty(key)) {
        paramsValuesObj[key.replace(':', '')] = value;
      }
    }
    /**
    * 应用名字转换为应用ID
    * @param {Array} names 应用名字
    */


    function replaceAppliationName2Id(names) {
      // 没有应用列表时，直接转成-1，不可搜索
      if (ALL_APPLICATIONS_LIST.length === 0) {
        return [-1];
      }

      var result = [];

      var _loop = function _loop(i) {
        var appName = names[i];
        var appIds = []; // 先精确查找

        appIds = ALL_APPLICATIONS_LIST.filter(function (app) {
          return app.name && app.name.toLocaleUpperCase() === appName.trim().toLocaleUpperCase();
        }).map(function (app) {
          return app.id;
        }); // 再模糊查找

        if (appIds.length === 0) {
          appIds = ALL_APPLICATIONS_LIST.filter(function (app) {
            return app.name && app.name.toLocaleUpperCase().indexOf(appName.trim().toLocaleUpperCase()) > -1;
          }).map(function (app) {
            return app.id;
          });
        }

        result = [].concat(_toConsumableArray(result), _toConsumableArray(appIds));
      };

      for (var i = 0; i < names.length; i++) {
        _loop(i);
      }

      var uniqueResult = uniqueArray(result);

      if (uniqueResult.length > 0) {
        return uniqueResult;
      }

      return [-1];
    }

    function replaceAppliationName2IdWithLike(name) {
      // 没有应用列表时，直接转成-1，不可搜索
      if (ALL_APPLICATIONS_LIST.length === 0) {
        return [-1];
      }

      var appName = name ? name.trim() : ''; // 如果查询的应用名字都是通配符，则直接返回-1

      if (appName.split('').every(function (ch) {
        return ch === '%' || ch === '_';
      })) {
        return [-1];
      }

      var result = [];
      var appIds = [];
      appIds = ALL_APPLICATIONS_LIST.filter(function (app) {
        if (appName.indexOf('%') === -1 && appName.indexOf('_') === -1) {
          return app.name && app.name.toLocaleUpperCase().indexOf(appName.toLocaleUpperCase()) > -1;
        } // 如果包含通配符 % 或者是 _，转成正则表达式
        // % 转换成零个或多个字符 .
        // _ 转换成任意单个字符 .{1}


        var regexText = '';
        var firstChar = appName.charAt(0);

        if (firstChar !== '%' && firstChar !== '_') {
          // 增加开头
          regexText += '^';
        } // 替换


        regexText += appName.replace(/%/g, '.{0,}').replace(/_/g, '.{1}');
        var lastChar = appName.charAt(appName.length);

        if (lastChar !== '%' && lastChar !== '_') {
          // 增加开头
          regexText += '$';
        }

        var regex = new RegExp("".concat(regexText), 'gi');
        return regex.test(app.name);
      }).map(function (app) {
        return app.id;
      });
      result = [].concat(_toConsumableArray(result), _toConsumableArray(appIds));
      var uniqueResult = uniqueArray(result);

      if (uniqueResult.length > 0) {
        return uniqueResult;
      }

      return [-1];
    }

    var APPLICATION_NAME_KEY = 'application_name';
    var APPLICATION_ID_KEY = 'application_id';
    var _options = options,
        applications = _options.applications,
        _options$json = _options.json,
        json = _options$json === void 0 ? false : _options$json;
    var applicationsJson = {}; // 解析应用列表

    if (Object.prototype.toString.call(applications) === '[object Object]') {
      applicationsJson = applications;
    } else if (typeof applications === 'string') {
      try {
        applicationsJson = JSON.parse(applications);
      } catch (error) {
        applicationsJson = {};
      }
    } // TODO: 解析可用字段，用于判断字段是否可用


    var ALL_APPLICATIONS_LIST = [];

    for (var key in applicationsJson) {
      ALL_APPLICATIONS_LIST.push({
        id: key,
        name: applicationsJson[key]
      });
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
});